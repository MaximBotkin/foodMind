# Generated by Django 5.1.6 on 2025-08-21 18:07

import datetime
import django.contrib.auth.models
import django.core.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(blank=True, max_length=150, null=True)),
                ('telegram_id', models.BigIntegerField(null=True, unique=True)),
                ('telegram_username', models.CharField(blank=True, max_length=64, null=True)),
                ('first_name', models.CharField(blank=True, max_length=64, null=True, verbose_name='Имя')),
                ('last_name', models.CharField(blank=True, max_length=64, null=True, verbose_name='Фамилия')),
                ('language_code', models.CharField(blank=True, default='ru', max_length=10, null=True, verbose_name='Язык')),
                ('init_data', models.TextField(blank=True, null=True)),
                ('web_app_query_id', models.CharField(blank=True, max_length=64, null=True)),
                ('is_bot', models.BooleanField(default=False, verbose_name='Бот')),
                ('gender', models.CharField(blank=True, choices=[('M', 'Мужской'), ('F', 'Женский')], max_length=1, null=True, verbose_name='Пол')),
                ('birth_date', models.DateField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(datetime.date(1900, 1, 1), message='Дата рождения не может быть раньше 1900 года.')], verbose_name='Дата рождения')),
                ('height', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(50, message='Рост не может быть меньше 50 см.'), django.core.validators.MaxValueValidator(250, message='Рост не может быть больше 250 см.')], verbose_name='Рост')),
                ('weight', models.DecimalField(blank=True, decimal_places=1, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(20, message='Вес не может быть меньше 20 кг.'), django.core.validators.MaxValueValidator(300, message='Вес не может быть больше 300 кг.')], verbose_name='Вес')),
                ('meta', models.JSONField(blank=True, default=dict, null=True, verbose_name='Дополнительная информация')),
                ('trial_status', models.CharField(choices=[('NOT_STARTED', 'Не начат'), ('IN_PROGRESS', 'В процессе'), ('ENDED', 'Окончен')], default='NOT_STARTED', max_length=12, verbose_name='Пробный период')),
                ('trial_end_date', models.DateTimeField(blank=True, null=True, verbose_name='Конец пробного периода')),
                ('is_premium', models.BooleanField(default=False, verbose_name='Премиум подписка')),
                ('premium_end_date', models.DateTimeField(blank=True, null=True, verbose_name='Окончание подписки')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='Дата создания профиля')),
                ('source', models.CharField(blank=True, max_length=100, null=True, verbose_name='Откуда узнали о приложении')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'ordering': ['-created_at'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
