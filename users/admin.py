from django.contrib import admin
from django.urls import reverse
from django.utils import timezone
from django.utils.html import format_html

from .models import User


@admin.register(User)
class UserAdmin(admin.ModelAdmin):
    # üìä –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    list_display = (
        'telegram_id_link', 'full_name', 'trial_status_badge', 'premium_status', 'age_display', 'last_login_display')

    list_display_links = ('telegram_id_link', 'full_name')
    list_filter = (
        'trial_status', 'is_premium', 'gender', 'is_active', 'is_staff', ('birth_date', admin.DateFieldListFilter),)

    search_fields = ('telegram_id', 'telegram_username', 'first_name', 'last_name', 'username')

    readonly_fields = ('telegram_id', 'created_at', 'last_login_display', 'trial_days_left', 'premium_days_left')

    fieldsets = (('üë§ –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
        'fields': ('telegram_id', ('first_name', 'last_name'), 'username', 'telegram_username', 'language_code'),
        'classes': ('wide', 'extrapretty')}),

                 ('üìä –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {'fields': (('gender', 'birth_date'), ('height', 'weight')),
                                             'classes': ('collapse', 'wide')}),

                 ('üéØ –ü–æ–¥–ø–∏—Å–∫–∞ –∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥', {'fields': (
                     ('trial_end_date', 'trial_days_left'),
                     'is_premium', ('premium_end_date', 'premium_days_left')),
                     'classes': ('wide',)}),

                 ('üîê –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {'fields': (
                     'is_active', 'is_staff', 'is_superuser', ('date_joined', 'last_login_display'), 'created_at'),
                     'classes': ('collapse',)}),

                 ('üìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {'fields': ('meta',), 'classes': ('collapse',)}))

    # üìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    actions = ['activate_trial', 'deactivate_trial', 'grant_premium']

    # üì± –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ
    def telegram_id_link(self, obj):
        url = reverse('admin:users_user_change', args=[obj.id])
        return format_html('<a href="{}">{}</a>', url, obj.telegram_id)

    telegram_id_link.short_description = 'Telegram ID'
    telegram_id_link.admin_order_field = 'telegram_id'

    def full_name(self, obj):
        name_parts = []
        if obj.first_name:
            name_parts.append(obj.first_name)
        if obj.last_name:
            name_parts.append(obj.last_name)

        if name_parts:
            full_name = ' '.join(name_parts)
            if obj.telegram_username:
                return format_html('{} <br><small style="color: #666;">@{}</small>', full_name, obj.telegram_username)
            return full_name
        return obj.telegram_username or '–ë–µ–∑ –∏–º–µ–Ω–∏'

    full_name.short_description = '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'

    def trial_status_badge(self, obj):
        status_colors = {'NOT_STARTED': 'gray', 'IN_PROGRESS': 'blue', 'ENDED': 'red'}
        status_texts = {'NOT_STARTED': '–ù–µ –Ω–∞—á–∞—Ç', 'IN_PROGRESS': '–ê–∫—Ç–∏–≤–µ–Ω', 'ENDED': '–ó–∞–≤–µ—Ä—à–µ–Ω'}

        color = status_colors.get(obj.trial_status, 'gray')
        text = status_texts.get(obj.trial_status, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

        return format_html('<span style="background: {}; color: white; padding: 2px 8px; '
                           'border-radius: 12px; font-size: 11px;">{}</span>', color, text)

    trial_status_badge.short_description = '–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥'

    def premium_status(self, obj):
        if obj.is_premium:
            if obj.premium_end_date and obj.premium_end_date < timezone.now():
                return format_html('<span style="background: #ff4757; color: white; padding: 2px 8px; '
                                   'border-radius: 12px; font-size: 11px;">–ò—Å—Ç–µ–∫</span>')
            return format_html('<span style="background: #2ed573; color: white; padding: 2px 8px; '
                               'border-radius: 12px; font-size: 11px;">–ê–∫—Ç–∏–≤–µ–Ω</span>')
        return format_html('<span style="background: #a4b0be; color: white; padding: 2px 8px; '
                           'border-radius: 12px; font-size: 11px;">–ù–µ–∞–∫—Ç–∏–≤–µ–Ω</span>')

    premium_status.short_description = '–ü—Ä–µ–º–∏—É–º'

    def age_display(self, obj):
        if obj.birth_date:
            today = timezone.now().date()
            age = today.year - obj.birth_date.year - (
                    (today.month, today.day) < (obj.birth_date.month, obj.birth_date.day))
            return f"{age} –ª–µ—Ç"
        return "‚Äî"

    age_display.short_description = '–í–æ–∑—Ä–∞—Å—Ç'

    def last_login_display(self, obj):
        if obj.last_login:
            return obj.last_login.strftime('%d.%m.%Y %H:%M')
        return "–ù–∏–∫–æ–≥–¥–∞"

    last_login_display.short_description = '–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥'

    def trial_status_badge_display(self, obj):
        return self.trial_status_badge(obj)

    trial_status_badge_display.short_description = '–°—Ç–∞—Ç—É—Å –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞'

    def trial_days_left(self, obj):
        if obj.trial_end_date and obj.trial_status == 'IN_PROGRESS':
            delta = obj.trial_end_date - timezone.now()
            if delta.days > 0:
                return f"{delta.days} –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å"
            return "–ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Å–µ–≥–æ–¥–Ω—è"
        return "‚Äî"

    trial_days_left.short_description = '–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π'

    def premium_status_display(self, obj):
        return self.premium_status(obj)

    premium_status_display.short_description = '–°—Ç–∞—Ç—É—Å –ø—Ä–µ–º–∏—É–º–∞'

    def premium_days_left(self, obj):
        if obj.is_premium and obj.premium_end_date:
            delta = obj.premium_end_date - timezone.now()
            if delta.days > 0:
                return f"{delta.days} –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å"
            elif delta.days == 0:
                return "–ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Å–µ–≥–æ–¥–Ω—è"
            return "–ò—Å—Ç–µ–∫"
        return "‚Äî"

    premium_days_left.short_description = '–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π –ø—Ä–µ–º–∏—É–º–∞'

    # ‚ö° –î–µ–π—Å—Ç–≤–∏—è
    def activate_trial(self, request, queryset):
        for user in queryset:
            if user.trial_status == 'NOT_STARTED':
                user.trial_status = 'IN_PROGRESS'
                user.trial_end_date = timezone.now() + timezone.timedelta(days=7)
                user.save()
        self.message_user(request, "–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

    activate_trial.short_description = "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥"

    def deactivate_trial(self, request, queryset):
        queryset.update(trial_status='ENDED')
        self.message_user(request, "–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")

    deactivate_trial.short_description = "–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥"

    def grant_premium(self, request, queryset):
        for user in queryset:
            user.is_premium = True
            user.premium_end_date = timezone.now() + timezone.timedelta(days=30)
            user.save()
        self.message_user(request, "–ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")

    grant_premium.short_description = "–í—ã–¥–∞—Ç—å –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø"

    # üé® –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
    class Media:
        css = {'all': (
        'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css', '/static/admin/css/custom.css',)}

    # üìà –ü–æ—Ä—è–¥–æ–∫ –ø–æ–ª–µ–π
    def get_fieldsets(self, request, obj=None):
        fieldsets = super().get_fieldsets(request, obj)
        if not obj:  # –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            return (('üë§ –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {'fields': ('telegram_id', 'first_name', 'last_name', 'username')}),)
        return fieldsets
